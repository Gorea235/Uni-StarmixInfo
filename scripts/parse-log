#! /usr/bin/env python3
import dateutil.parser
import json
import sys
from tkinter import *
from tkinter import ttk


LOG_LINE_FORMAT_ITEMS = ["@t", "@i", "@m", "@x", "@l"]
LOG_LEVEL_KEY = "@l"
DEFAULT_LEVEL = "Information"
END_OF_LOG_TEXT = "> end of log "
USE_BLANK_LINES = True
BLANK_LINES = 8
NUM_HSPLITS = 300


class App(ttk.Frame):
    def __init__(self, root):
        # config window
        root.geometry("1200x600")
        # init self
        super().__init__(root)
        self.pack(fill=BOTH, expand=True)

        # init widgets
        self.init_widgets()

    def get_level(self, line):
        if LOG_LEVEL_KEY not in line:
            return DEFAULT_LEVEL
        return line[LOG_LEVEL_KEY]

    def init_widgets(self):
        # init bade widgets
        self.tree = ttk.Treeview(self, selectmode=NONE)
        self.scroll = ttk.Scrollbar(
            self, orient=VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=self.scroll.set)
        self.scroll.pack(side=RIGHT, fill=Y)
        self.tree.pack(fill=BOTH, expand=True)

        # load log from STDIN (allows SSH reading)
        for ln in sys.stdin:
            ln = ln.strip()
            if ln != "":
                line = json.loads(ln)
                lvl = self.get_level(line)
                id = self.tree.insert("", "end", text="[{:%Y-%m-%d %H:%M:%S}] [{}] {}".format(
                    dateutil.parser.parse(line[LOG_LINE_FORMAT_ITEMS[0]]),
                    line[LOG_LINE_FORMAT_ITEMS[1]].upper(),
                    line[LOG_LINE_FORMAT_ITEMS[2]]
                ), tags=(lvl, ))
                self.tree.insert(id, 0, text=">>  {}  <<".format(lvl))
                if LOG_LINE_FORMAT_ITEMS[3] in line:
                    exlines = line[LOG_LINE_FORMAT_ITEMS[3]].split("\n")
                    ex = self.tree.insert(id, "end", text="Exception: {}".format(
                        exlines[0]
                    ))
                    for exline in exlines:
                        self.tree.insert(
                            ex, "end", text=exline)
                for k, v in line.items():
                    if k not in LOG_LINE_FORMAT_ITEMS:
                        self.tree.insert(id, "end", text="{}: {}".format(k, v))

        # add an end line, and optional beyond scrolling
        self.tree.insert("", "end", text=(
            END_OF_LOG_TEXT + ("-" * (NUM_HSPLITS - len(END_OF_LOG_TEXT)))))
        if USE_BLANK_LINES:
            for i in range(BLANK_LINES):
                self.tree.insert("", "end")
            self.tree.insert("", "end", text="-" * NUM_HSPLITS)

        # config message colours
        self.tree.tag_configure("Error", background="light coral")
        self.tree.tag_configure("Warning", background="orange")
        self.tree.tag_configure("Information", background="white")
        self.tree.tag_configure("Debug", background="azure2")
        self.tree.tag_configure("Trace", background="azure3")

        self.update()
        self.tree.yview_moveto(1)


def run():
    App(Tk()).mainloop()


if __name__ == "__main__":
    run()
